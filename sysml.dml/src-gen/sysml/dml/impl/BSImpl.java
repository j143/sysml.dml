/**
 * generated by Xtext 2.9.0
 */
package sysml.dml.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import sysml.dml.BS;
import sysml.dml.DmlPackage;
import sysml.dml.S;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>BS</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link sysml.dml.impl.BSImpl#getSingleS <em>Single S</em>}</li>
 *   <li>{@link sysml.dml.impl.BSImpl#getS <em>S</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BSImpl extends MinimalEObjectImpl.Container implements BS
{
  /**
   * The cached value of the '{@link #getSingleS() <em>Single S</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSingleS()
   * @generated
   * @ordered
   */
  protected S singleS;

  /**
   * The cached value of the '{@link #getS() <em>S</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getS()
   * @generated
   * @ordered
   */
  protected EList<S> s;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BSImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DmlPackage.Literals.BS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public S getSingleS()
  {
    return singleS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSingleS(S newSingleS, NotificationChain msgs)
  {
    S oldSingleS = singleS;
    singleS = newSingleS;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DmlPackage.BS__SINGLE_S, oldSingleS, newSingleS);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSingleS(S newSingleS)
  {
    if (newSingleS != singleS)
    {
      NotificationChain msgs = null;
      if (singleS != null)
        msgs = ((InternalEObject)singleS).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DmlPackage.BS__SINGLE_S, null, msgs);
      if (newSingleS != null)
        msgs = ((InternalEObject)newSingleS).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DmlPackage.BS__SINGLE_S, null, msgs);
      msgs = basicSetSingleS(newSingleS, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DmlPackage.BS__SINGLE_S, newSingleS, newSingleS));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<S> getS()
  {
    if (s == null)
    {
      s = new EObjectContainmentEList<S>(S.class, this, DmlPackage.BS__S);
    }
    return s;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DmlPackage.BS__SINGLE_S:
        return basicSetSingleS(null, msgs);
      case DmlPackage.BS__S:
        return ((InternalEList<?>)getS()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DmlPackage.BS__SINGLE_S:
        return getSingleS();
      case DmlPackage.BS__S:
        return getS();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DmlPackage.BS__SINGLE_S:
        setSingleS((S)newValue);
        return;
      case DmlPackage.BS__S:
        getS().clear();
        getS().addAll((Collection<? extends S>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DmlPackage.BS__SINGLE_S:
        setSingleS((S)null);
        return;
      case DmlPackage.BS__S:
        getS().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DmlPackage.BS__SINGLE_S:
        return singleS != null;
      case DmlPackage.BS__S:
        return s != null && !s.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BSImpl
