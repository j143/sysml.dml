/*
 * generated by Xtext 2.9.0
 */
package sysml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DmlGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.D");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFFParserRuleCall_0_0 = (RuleCall)cFAssignment_0.eContents().get(0);
		private final Assignment cSAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSSParserRuleCall_1_0 = (RuleCall)cSAssignment_1.eContents().get(0);
		
		//D:
		//	(f+=F | s+=S)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(f+=F | s+=S)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//f+=F
		public Assignment getFAssignment_0() { return cFAssignment_0; }
		
		//F
		public RuleCall getFFParserRuleCall_0_0() { return cFFParserRuleCall_0_0; }
		
		//s+=S
		public Assignment getSAssignment_1() { return cSAssignment_1; }
		
		//S
		public RuleCall getSSParserRuleCall_1_0() { return cSSParserRuleCall_1_0; }
	}
	public class FElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.F");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final RuleCall cASParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cFunctionKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Assignment cIAssignment_0_4 = (Assignment)cGroup_0.eContents().get(4);
		private final RuleCall cIPLParserRuleCall_0_4_0 = (RuleCall)cIAssignment_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Group cGroup_0_6 = (Group)cGroup_0.eContents().get(6);
		private final Keyword cReturnKeyword_0_6_0 = (Keyword)cGroup_0_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_6_1 = (Keyword)cGroup_0_6.eContents().get(1);
		private final Assignment cRAssignment_0_6_2 = (Assignment)cGroup_0_6.eContents().get(2);
		private final RuleCall cRPLParserRuleCall_0_6_2_0 = (RuleCall)cRAssignment_0_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_6_3 = (Keyword)cGroup_0_6.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Assignment cSAssignment_0_8 = (Assignment)cGroup_0.eContents().get(8);
		private final RuleCall cSSParserRuleCall_0_8_0 = (RuleCall)cSAssignment_0_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_9 = (Keyword)cGroup_0.eContents().get(9);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cNameAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cNameIDParserRuleCall_1_0_0 = (RuleCall)cNameAssignment_1_0.eContents().get(0);
		private final RuleCall cASParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cExternalFunctionKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cIAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cIPLParserRuleCall_1_4_0 = (RuleCall)cIAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Group cGroup_1_6 = (Group)cGroup_1.eContents().get(6);
		private final Keyword cReturnKeyword_1_6_0 = (Keyword)cGroup_1_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_6_1 = (Keyword)cGroup_1_6.eContents().get(1);
		private final Assignment cRAssignment_1_6_2 = (Assignment)cGroup_1_6.eContents().get(2);
		private final RuleCall cRPLParserRuleCall_1_6_2_0 = (RuleCall)cRAssignment_1_6_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_6_3 = (Keyword)cGroup_1_6.eContents().get(3);
		private final Keyword cImplementedKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		private final Keyword cInKeyword_1_8 = (Keyword)cGroup_1.eContents().get(8);
		private final Keyword cLeftParenthesisKeyword_1_9 = (Keyword)cGroup_1.eContents().get(9);
		private final Group cGroup_1_10 = (Group)cGroup_1.eContents().get(10);
		private final Assignment cSpkvAssignment_1_10_0 = (Assignment)cGroup_1_10.eContents().get(0);
		private final RuleCall cSpkvSPKVParserRuleCall_1_10_0_0 = (RuleCall)cSpkvAssignment_1_10_0.eContents().get(0);
		private final Group cGroup_1_10_1 = (Group)cGroup_1_10.eContents().get(1);
		private final Keyword cCommaKeyword_1_10_1_0 = (Keyword)cGroup_1_10_1.eContents().get(0);
		private final Assignment cSpkvAssignment_1_10_1_1 = (Assignment)cGroup_1_10_1.eContents().get(1);
		private final RuleCall cSpkvSPKVParserRuleCall_1_10_1_1_0 = (RuleCall)cSpkvAssignment_1_10_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_11 = (Keyword)cGroup_1.eContents().get(11);
		
		//F:
		//	name=ID AS 'function' '(' i=PL ')' ('return' '(' r=PL ')')? '{' s+=S* '}'
		//	| name=ID AS 'externalFunction' '(' i=PL ')' ('return' '(' r=PL ')')? 'implemented' 'in' '(' (spkv+=SPKV (','
		//	spkv+=SPKV)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//// F = Functional Statement
		//name=ID AS 'function' '(' i=PL ')' ('return' '(' r=PL ')')? '{' s+=S* '}' | name=ID AS 'externalFunction' '(' i=PL ')'
		//('return' '(' r=PL ')')? 'implemented' 'in' '(' (spkv+=SPKV (',' spkv+=SPKV)*)? ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// F = Functional Statement
		//name=ID AS 'function' '(' i=PL ')' ('return' '(' r=PL ')')? '{' s+=S* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//// F = Functional Statement
		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_0_0_0() { return cNameIDParserRuleCall_0_0_0; }
		
		//AS
		public RuleCall getASParserRuleCall_0_1() { return cASParserRuleCall_0_1; }
		
		//'function'
		public Keyword getFunctionKeyword_0_2() { return cFunctionKeyword_0_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_3() { return cLeftParenthesisKeyword_0_3; }
		
		//i=PL
		public Assignment getIAssignment_0_4() { return cIAssignment_0_4; }
		
		//PL
		public RuleCall getIPLParserRuleCall_0_4_0() { return cIPLParserRuleCall_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_5() { return cRightParenthesisKeyword_0_5; }
		
		//('return' '(' r=PL ')')?
		public Group getGroup_0_6() { return cGroup_0_6; }
		
		//'return'
		public Keyword getReturnKeyword_0_6_0() { return cReturnKeyword_0_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_6_1() { return cLeftParenthesisKeyword_0_6_1; }
		
		//r=PL
		public Assignment getRAssignment_0_6_2() { return cRAssignment_0_6_2; }
		
		//PL
		public RuleCall getRPLParserRuleCall_0_6_2_0() { return cRPLParserRuleCall_0_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_6_3() { return cRightParenthesisKeyword_0_6_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_7() { return cLeftCurlyBracketKeyword_0_7; }
		
		//s+=S*
		public Assignment getSAssignment_0_8() { return cSAssignment_0_8; }
		
		//S
		public RuleCall getSSParserRuleCall_0_8_0() { return cSSParserRuleCall_0_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_9() { return cRightCurlyBracketKeyword_0_9; }
		
		//name=ID AS 'externalFunction' '(' i=PL ')' ('return' '(' r=PL ')')? 'implemented' 'in' '(' (spkv+=SPKV (','
		//spkv+=SPKV)*)? ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//name=ID
		public Assignment getNameAssignment_1_0() { return cNameAssignment_1_0; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_1_0_0() { return cNameIDParserRuleCall_1_0_0; }
		
		//AS
		public RuleCall getASParserRuleCall_1_1() { return cASParserRuleCall_1_1; }
		
		//'externalFunction'
		public Keyword getExternalFunctionKeyword_1_2() { return cExternalFunctionKeyword_1_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }
		
		//i=PL
		public Assignment getIAssignment_1_4() { return cIAssignment_1_4; }
		
		//PL
		public RuleCall getIPLParserRuleCall_1_4_0() { return cIPLParserRuleCall_1_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
		
		//('return' '(' r=PL ')')?
		public Group getGroup_1_6() { return cGroup_1_6; }
		
		//'return'
		public Keyword getReturnKeyword_1_6_0() { return cReturnKeyword_1_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_6_1() { return cLeftParenthesisKeyword_1_6_1; }
		
		//r=PL
		public Assignment getRAssignment_1_6_2() { return cRAssignment_1_6_2; }
		
		//PL
		public RuleCall getRPLParserRuleCall_1_6_2_0() { return cRPLParserRuleCall_1_6_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_6_3() { return cRightParenthesisKeyword_1_6_3; }
		
		//'implemented'
		public Keyword getImplementedKeyword_1_7() { return cImplementedKeyword_1_7; }
		
		//'in'
		public Keyword getInKeyword_1_8() { return cInKeyword_1_8; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_9() { return cLeftParenthesisKeyword_1_9; }
		
		//(spkv+=SPKV (',' spkv+=SPKV)*)?
		public Group getGroup_1_10() { return cGroup_1_10; }
		
		//spkv+=SPKV
		public Assignment getSpkvAssignment_1_10_0() { return cSpkvAssignment_1_10_0; }
		
		//SPKV
		public RuleCall getSpkvSPKVParserRuleCall_1_10_0_0() { return cSpkvSPKVParserRuleCall_1_10_0_0; }
		
		//(',' spkv+=SPKV)*
		public Group getGroup_1_10_1() { return cGroup_1_10_1; }
		
		//','
		public Keyword getCommaKeyword_1_10_1_0() { return cCommaKeyword_1_10_1_0; }
		
		//spkv+=SPKV
		public Assignment getSpkvAssignment_1_10_1_1() { return cSpkvAssignment_1_10_1_1; }
		
		//SPKV
		public RuleCall getSpkvSPKVParserRuleCall_1_10_1_1_0() { return cSpkvSPKVParserRuleCall_1_10_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_11() { return cRightParenthesisKeyword_1_11; }
	}
	public class SElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.S");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSourceKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cSrcAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cSrcSTRINGTerminalRuleCall_0_2_0 = (RuleCall)cSrcAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cAsKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cSrcidAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cSrcidIDParserRuleCall_0_5_0 = (RuleCall)cSrcidAssignment_0_5.eContents().get(0);
		private final RuleCall cESTerminalRuleCall_0_6 = (RuleCall)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cSetcwdKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cCwdAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cCwdSTRINGTerminalRuleCall_1_2_0 = (RuleCall)cCwdAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final RuleCall cESTerminalRuleCall_1_4 = (RuleCall)cGroup_1.eContents().get(4);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cIfeAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cIfeEParserRuleCall_2_2_0 = (RuleCall)cIfeAssignment_2_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Assignment cIsAssignment_2_4 = (Assignment)cGroup_2.eContents().get(4);
		private final RuleCall cIsBSParserRuleCall_2_4_0 = (RuleCall)cIsAssignment_2_4.eContents().get(0);
		private final Group cGroup_2_5 = (Group)cGroup_2.eContents().get(5);
		private final Keyword cElseKeyword_2_5_0 = (Keyword)cGroup_2_5.eContents().get(0);
		private final Assignment cEsAssignment_2_5_1 = (Assignment)cGroup_2_5.eContents().get(1);
		private final RuleCall cEsBSParserRuleCall_2_5_1_0 = (RuleCall)cEsAssignment_2_5_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cForKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cFpAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cFpFPParserRuleCall_3_2_0 = (RuleCall)cFpAssignment_3_2.eContents().get(0);
		private final Assignment cPAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cPPARFORPARAMSParserRuleCall_3_3_0 = (RuleCall)cPAssignment_3_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cSAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cSBSParserRuleCall_3_5_0 = (RuleCall)cSAssignment_3_5.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cParforKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cPfAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cPfFPParserRuleCall_4_2_0 = (RuleCall)cPfAssignment_4_2.eContents().get(0);
		private final Assignment cPAssignment_4_3 = (Assignment)cGroup_4.eContents().get(3);
		private final RuleCall cPPARFORPARAMSParserRuleCall_4_3_0 = (RuleCall)cPAssignment_4_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Assignment cSAssignment_4_5 = (Assignment)cGroup_4.eContents().get(5);
		private final RuleCall cSBSParserRuleCall_4_5_0 = (RuleCall)cSAssignment_4_5.eContents().get(0);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cWhileKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cWeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cWeEParserRuleCall_5_2_0 = (RuleCall)cWeAssignment_5_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Assignment cSAssignment_5_4 = (Assignment)cGroup_5.eContents().get(4);
		private final RuleCall cSBSParserRuleCall_5_4_0 = (RuleCall)cSAssignment_5_4.eContents().get(0);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cDiAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cDiDIParserRuleCall_6_1_0 = (RuleCall)cDiAssignment_6_1.eContents().get(0);
		private final Group cGroup_6_2 = (Group)cGroup_6.eContents().get(2);
		private final Keyword cCommaKeyword_6_2_0 = (Keyword)cGroup_6_2.eContents().get(0);
		private final Assignment cDiAssignment_6_2_1 = (Assignment)cGroup_6_2.eContents().get(1);
		private final RuleCall cDiDIParserRuleCall_6_2_1_0 = (RuleCall)cDiAssignment_6_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final RuleCall cASParserRuleCall_6_4 = (RuleCall)cGroup_6.eContents().get(4);
		private final Assignment cFcAssignment_6_5 = (Assignment)cGroup_6.eContents().get(5);
		private final RuleCall cFcFCParserRuleCall_6_5_0 = (RuleCall)cFcAssignment_6_5.eContents().get(0);
		private final RuleCall cESTerminalRuleCall_6_6 = (RuleCall)cGroup_6.eContents().get(6);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Assignment cLhsdiAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cLhsdiDIParserRuleCall_7_0_0 = (RuleCall)cLhsdiAssignment_7_0.eContents().get(0);
		private final RuleCall cASParserRuleCall_7_1 = (RuleCall)cGroup_7.eContents().get(1);
		private final Alternatives cAlternatives_7_2 = (Alternatives)cGroup_7.eContents().get(2);
		private final Group cGroup_7_2_0 = (Group)cAlternatives_7_2.eContents().get(0);
		private final Keyword cIfdefKeyword_7_2_0_0 = (Keyword)cGroup_7_2_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_2_0_1 = (Keyword)cGroup_7_2_0.eContents().get(1);
		private final Assignment cDiAssignment_7_2_0_2 = (Assignment)cGroup_7_2_0.eContents().get(2);
		private final RuleCall cDiDIParserRuleCall_7_2_0_2_0 = (RuleCall)cDiAssignment_7_2_0_2.eContents().get(0);
		private final Keyword cCommaKeyword_7_2_0_3 = (Keyword)cGroup_7_2_0.eContents().get(3);
		private final Assignment cEAssignment_7_2_0_4 = (Assignment)cGroup_7_2_0.eContents().get(4);
		private final RuleCall cEEParserRuleCall_7_2_0_4_0 = (RuleCall)cEAssignment_7_2_0_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7_2_0_5 = (Keyword)cGroup_7_2_0.eContents().get(5);
		private final Assignment cEAssignment_7_2_1 = (Assignment)cAlternatives_7_2.eContents().get(1);
		private final RuleCall cEEParserRuleCall_7_2_1_0 = (RuleCall)cEAssignment_7_2_1.eContents().get(0);
		private final RuleCall cESTerminalRuleCall_7_3 = (RuleCall)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cAlternatives.eContents().get(8);
		private final Assignment cFcAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cFcFCParserRuleCall_8_0_0 = (RuleCall)cFcAssignment_8_0.eContents().get(0);
		private final RuleCall cESTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		
		//S: // S = Statement
		//	'source' '(' src=STRING ')' 'as' srcid=ID ES | 'setcwd' '(' cwd=STRING ')' ES | 'if' '(' ife=E ')' is=BS (=> 'else'
		//	es=BS)? | 'for' '(' fp=FP p=PARFORPARAMS ')' s=BS | 'parfor' '(' pf=FP p=PARFORPARAMS ')' s=BS | 'while' '(' we=E ')'
		//	s=BS | '[' di+=DI (',' di+=DI)* ']' AS fc=FC ES | lhsdi=DI AS ('ifdef' '(' di+=DI ',' e+=E ')' | e+=E) ES | fc=FC ES;
		@Override public ParserRule getRule() { return rule; }
		
		//// S = Statement
		//'source' '(' src=STRING ')' 'as' srcid=ID ES | 'setcwd' '(' cwd=STRING ')' ES | 'if' '(' ife=E ')' is=BS (=> 'else'
		//es=BS)? | 'for' '(' fp=FP p=PARFORPARAMS ')' s=BS | 'parfor' '(' pf=FP p=PARFORPARAMS ')' s=BS | 'while' '(' we=E ')'
		//s=BS | '[' di+=DI (',' di+=DI)* ']' AS fc=FC ES | lhsdi=DI AS ('ifdef' '(' di+=DI ',' e+=E ')' | e+=E) ES | fc=FC ES
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// S = Statement
		//'source' '(' src=STRING ')' 'as' srcid=ID ES
		public Group getGroup_0() { return cGroup_0; }
		
		//// S = Statement
		//'source'
		public Keyword getSourceKeyword_0_0() { return cSourceKeyword_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }
		
		//src=STRING
		public Assignment getSrcAssignment_0_2() { return cSrcAssignment_0_2; }
		
		//STRING
		public RuleCall getSrcSTRINGTerminalRuleCall_0_2_0() { return cSrcSTRINGTerminalRuleCall_0_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }
		
		//'as'
		public Keyword getAsKeyword_0_4() { return cAsKeyword_0_4; }
		
		//srcid=ID
		public Assignment getSrcidAssignment_0_5() { return cSrcidAssignment_0_5; }
		
		//ID
		public RuleCall getSrcidIDParserRuleCall_0_5_0() { return cSrcidIDParserRuleCall_0_5_0; }
		
		//ES
		public RuleCall getESTerminalRuleCall_0_6() { return cESTerminalRuleCall_0_6; }
		
		//'setcwd' '(' cwd=STRING ')' ES
		public Group getGroup_1() { return cGroup_1; }
		
		//'setcwd'
		public Keyword getSetcwdKeyword_1_0() { return cSetcwdKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//cwd=STRING
		public Assignment getCwdAssignment_1_2() { return cCwdAssignment_1_2; }
		
		//STRING
		public RuleCall getCwdSTRINGTerminalRuleCall_1_2_0() { return cCwdSTRINGTerminalRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//ES
		public RuleCall getESTerminalRuleCall_1_4() { return cESTerminalRuleCall_1_4; }
		
		//'if' '(' ife=E ')' is=BS (=> 'else' es=BS)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'if'
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//ife=E
		public Assignment getIfeAssignment_2_2() { return cIfeAssignment_2_2; }
		
		//E
		public RuleCall getIfeEParserRuleCall_2_2_0() { return cIfeEParserRuleCall_2_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//is=BS
		public Assignment getIsAssignment_2_4() { return cIsAssignment_2_4; }
		
		//BS
		public RuleCall getIsBSParserRuleCall_2_4_0() { return cIsBSParserRuleCall_2_4_0; }
		
		//(=> 'else' es=BS)?
		public Group getGroup_2_5() { return cGroup_2_5; }
		
		//=> 'else'
		public Keyword getElseKeyword_2_5_0() { return cElseKeyword_2_5_0; }
		
		//es=BS
		public Assignment getEsAssignment_2_5_1() { return cEsAssignment_2_5_1; }
		
		//BS
		public RuleCall getEsBSParserRuleCall_2_5_1_0() { return cEsBSParserRuleCall_2_5_1_0; }
		
		//'for' '(' fp=FP p=PARFORPARAMS ')' s=BS
		public Group getGroup_3() { return cGroup_3; }
		
		//'for'
		public Keyword getForKeyword_3_0() { return cForKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//fp=FP
		public Assignment getFpAssignment_3_2() { return cFpAssignment_3_2; }
		
		//FP
		public RuleCall getFpFPParserRuleCall_3_2_0() { return cFpFPParserRuleCall_3_2_0; }
		
		//p=PARFORPARAMS
		public Assignment getPAssignment_3_3() { return cPAssignment_3_3; }
		
		//PARFORPARAMS
		public RuleCall getPPARFORPARAMSParserRuleCall_3_3_0() { return cPPARFORPARAMSParserRuleCall_3_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//s=BS
		public Assignment getSAssignment_3_5() { return cSAssignment_3_5; }
		
		//BS
		public RuleCall getSBSParserRuleCall_3_5_0() { return cSBSParserRuleCall_3_5_0; }
		
		//'parfor' '(' pf=FP p=PARFORPARAMS ')' s=BS
		public Group getGroup_4() { return cGroup_4; }
		
		//'parfor'
		public Keyword getParforKeyword_4_0() { return cParforKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//pf=FP
		public Assignment getPfAssignment_4_2() { return cPfAssignment_4_2; }
		
		//FP
		public RuleCall getPfFPParserRuleCall_4_2_0() { return cPfFPParserRuleCall_4_2_0; }
		
		//p=PARFORPARAMS
		public Assignment getPAssignment_4_3() { return cPAssignment_4_3; }
		
		//PARFORPARAMS
		public RuleCall getPPARFORPARAMSParserRuleCall_4_3_0() { return cPPARFORPARAMSParserRuleCall_4_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//s=BS
		public Assignment getSAssignment_4_5() { return cSAssignment_4_5; }
		
		//BS
		public RuleCall getSBSParserRuleCall_4_5_0() { return cSBSParserRuleCall_4_5_0; }
		
		//'while' '(' we=E ')' s=BS
		public Group getGroup_5() { return cGroup_5; }
		
		//'while'
		public Keyword getWhileKeyword_5_0() { return cWhileKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//we=E
		public Assignment getWeAssignment_5_2() { return cWeAssignment_5_2; }
		
		//E
		public RuleCall getWeEParserRuleCall_5_2_0() { return cWeEParserRuleCall_5_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
		
		//s=BS
		public Assignment getSAssignment_5_4() { return cSAssignment_5_4; }
		
		//BS
		public RuleCall getSBSParserRuleCall_5_4_0() { return cSBSParserRuleCall_5_4_0; }
		
		//'[' di+=DI (',' di+=DI)* ']' AS fc=FC ES
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//di+=DI
		public Assignment getDiAssignment_6_1() { return cDiAssignment_6_1; }
		
		//DI
		public RuleCall getDiDIParserRuleCall_6_1_0() { return cDiDIParserRuleCall_6_1_0; }
		
		//(',' di+=DI)*
		public Group getGroup_6_2() { return cGroup_6_2; }
		
		//','
		public Keyword getCommaKeyword_6_2_0() { return cCommaKeyword_6_2_0; }
		
		//di+=DI
		public Assignment getDiAssignment_6_2_1() { return cDiAssignment_6_2_1; }
		
		//DI
		public RuleCall getDiDIParserRuleCall_6_2_1_0() { return cDiDIParserRuleCall_6_2_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_3() { return cRightSquareBracketKeyword_6_3; }
		
		//AS
		public RuleCall getASParserRuleCall_6_4() { return cASParserRuleCall_6_4; }
		
		//fc=FC
		public Assignment getFcAssignment_6_5() { return cFcAssignment_6_5; }
		
		//FC
		public RuleCall getFcFCParserRuleCall_6_5_0() { return cFcFCParserRuleCall_6_5_0; }
		
		//ES
		public RuleCall getESTerminalRuleCall_6_6() { return cESTerminalRuleCall_6_6; }
		
		//lhsdi=DI AS ('ifdef' '(' di+=DI ',' e+=E ')' | e+=E) ES
		public Group getGroup_7() { return cGroup_7; }
		
		//lhsdi=DI
		public Assignment getLhsdiAssignment_7_0() { return cLhsdiAssignment_7_0; }
		
		//DI
		public RuleCall getLhsdiDIParserRuleCall_7_0_0() { return cLhsdiDIParserRuleCall_7_0_0; }
		
		//AS
		public RuleCall getASParserRuleCall_7_1() { return cASParserRuleCall_7_1; }
		
		//('ifdef' '(' di+=DI ',' e+=E ')' | e+=E)
		public Alternatives getAlternatives_7_2() { return cAlternatives_7_2; }
		
		//'ifdef' '(' di+=DI ',' e+=E ')'
		public Group getGroup_7_2_0() { return cGroup_7_2_0; }
		
		//'ifdef'
		public Keyword getIfdefKeyword_7_2_0_0() { return cIfdefKeyword_7_2_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_2_0_1() { return cLeftParenthesisKeyword_7_2_0_1; }
		
		//di+=DI
		public Assignment getDiAssignment_7_2_0_2() { return cDiAssignment_7_2_0_2; }
		
		//DI
		public RuleCall getDiDIParserRuleCall_7_2_0_2_0() { return cDiDIParserRuleCall_7_2_0_2_0; }
		
		//','
		public Keyword getCommaKeyword_7_2_0_3() { return cCommaKeyword_7_2_0_3; }
		
		//e+=E
		public Assignment getEAssignment_7_2_0_4() { return cEAssignment_7_2_0_4; }
		
		//E
		public RuleCall getEEParserRuleCall_7_2_0_4_0() { return cEEParserRuleCall_7_2_0_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_2_0_5() { return cRightParenthesisKeyword_7_2_0_5; }
		
		//e+=E
		public Assignment getEAssignment_7_2_1() { return cEAssignment_7_2_1; }
		
		//E
		public RuleCall getEEParserRuleCall_7_2_1_0() { return cEEParserRuleCall_7_2_1_0; }
		
		//ES
		public RuleCall getESTerminalRuleCall_7_3() { return cESTerminalRuleCall_7_3; }
		
		//fc=FC ES
		public Group getGroup_8() { return cGroup_8; }
		
		//fc=FC
		public Assignment getFcAssignment_8_0() { return cFcAssignment_8_0; }
		
		//FC
		public RuleCall getFcFCParserRuleCall_8_0_0() { return cFcFCParserRuleCall_8_0_0; }
		
		//ES
		public RuleCall getESTerminalRuleCall_8_1() { return cESTerminalRuleCall_8_1; }
	}
	public class FCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.FC");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cBifAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cBifBIFParserRuleCall_0_0_0 = (RuleCall)cBifAssignment_0_0.eContents().get(0);
		private final Assignment cIdAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cIdIDParserRuleCall_0_1_0 = (RuleCall)cIdAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cPeAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cPePEParserRuleCall_2_0_0 = (RuleCall)cPeAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cPeAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cPePEParserRuleCall_2_1_1_0 = (RuleCall)cPeAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FC:
		//	(bif=BIF | id=ID) '(' (pe+=PE (',' pe+=PE)*)? ')';
		@Override public ParserRule getRule() { return rule; }
		
		//(bif=BIF | id=ID) '(' (pe+=PE (',' pe+=PE)*)? ')'
		public Group getGroup() { return cGroup; }
		
		//(bif=BIF | id=ID)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//bif=BIF
		public Assignment getBifAssignment_0_0() { return cBifAssignment_0_0; }
		
		//BIF
		public RuleCall getBifBIFParserRuleCall_0_0_0() { return cBifBIFParserRuleCall_0_0_0; }
		
		//id=ID
		public Assignment getIdAssignment_0_1() { return cIdAssignment_0_1; }
		
		//ID
		public RuleCall getIdIDParserRuleCall_0_1_0() { return cIdIDParserRuleCall_0_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(pe+=PE (',' pe+=PE)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//pe+=PE
		public Assignment getPeAssignment_2_0() { return cPeAssignment_2_0; }
		
		//PE
		public RuleCall getPePEParserRuleCall_2_0_0() { return cPePEParserRuleCall_2_0_0; }
		
		//(',' pe+=PE)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//','
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }
		
		//pe+=PE
		public Assignment getPeAssignment_2_1_1() { return cPeAssignment_2_1_1; }
		
		//PE
		public RuleCall getPePEParserRuleCall_2_1_1_0() { return cPePEParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class BSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.BS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSingleSAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSingleSSParserRuleCall_0_0 = (RuleCall)cSingleSAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSSParserRuleCall_1_1_0 = (RuleCall)cSAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//BS:
		//	singleS=S | '{' s+=S* '}';
		@Override public ParserRule getRule() { return rule; }
		
		//// BS = Block of Statements
		//singleS=S | '{' s+=S* '}'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// BS = Block of Statements
		//singleS=S
		public Assignment getSingleSAssignment_0() { return cSingleSAssignment_0; }
		
		//S
		public RuleCall getSingleSSParserRuleCall_0_0() { return cSingleSSParserRuleCall_0_0; }
		
		//'{' s+=S* '}'
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//s+=S*
		public Assignment getSAssignment_1_1() { return cSAssignment_1_1; }
		
		//S
		public RuleCall getSSParserRuleCall_1_1_0() { return cSSParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class FPElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.FP");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDParserRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Keyword cInKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIsISParserRuleCall_2_0 = (RuleCall)cIsAssignment_2.eContents().get(0);
		
		//FP:
		//	id=ID 'in' is=IS;
		@Override public ParserRule getRule() { return rule; }
		
		//// FP = For Predicate
		//id=ID 'in' is=IS
		public Group getGroup() { return cGroup; }
		
		//// FP = For Predicate
		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }
		
		//ID
		public RuleCall getIdIDParserRuleCall_0_0() { return cIdIDParserRuleCall_0_0; }
		
		//'in'
		public Keyword getInKeyword_1() { return cInKeyword_1; }
		
		//is=IS
		public Assignment getIsAssignment_2() { return cIsAssignment_2; }
		
		//IS
		public RuleCall getIsISParserRuleCall_2_0() { return cIsISParserRuleCall_2_0; }
	}
	public class PARFORPARAMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.PARFORPARAMS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommaKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParamsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParamsPARAMSParserRuleCall_1_0 = (RuleCall)cParamsAssignment_1.eContents().get(0);
		
		//PARFORPARAMS:
		//	(',' params+=PARAMS)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(',' params+=PARAMS)*
		public Group getGroup() { return cGroup; }
		
		//','
		public Keyword getCommaKeyword_0() { return cCommaKeyword_0; }
		
		//params+=PARAMS
		public Assignment getParamsAssignment_1() { return cParamsAssignment_1; }
		
		//PARAMS
		public RuleCall getParamsPARAMSParserRuleCall_1_0() { return cParamsPARAMSParserRuleCall_1_0; }
	}
	public class PARAMSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.PARAMS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cCheckKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cParKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cModeKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Alternatives cAlternatives_2_2 = (Alternatives)cGroup_2.eContents().get(2);
		private final Keyword cLOCALKeyword_2_2_0 = (Keyword)cAlternatives_2_2.eContents().get(0);
		private final Keyword cREMOTE_MRKeyword_2_2_1 = (Keyword)cAlternatives_2_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cTaskpartitionerKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Alternatives cAlternatives_3_2 = (Alternatives)cGroup_3.eContents().get(2);
		private final Keyword cFIXEDKeyword_3_2_0 = (Keyword)cAlternatives_3_2.eContents().get(0);
		private final Keyword cNAIVEKeyword_3_2_1 = (Keyword)cAlternatives_3_2.eContents().get(1);
		private final Keyword cSTATICKeyword_3_2_2 = (Keyword)cAlternatives_3_2.eContents().get(2);
		private final Keyword cFACTORINGKeyword_3_2_3 = (Keyword)cAlternatives_3_2.eContents().get(3);
		private final Keyword cFACTORING_CMINKeyword_3_2_4 = (Keyword)cAlternatives_3_2.eContents().get(4);
		private final Keyword cFACTORING_CMAXKeyword_3_2_5 = (Keyword)cAlternatives_3_2.eContents().get(5);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cTasksizeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cDatapartitionerKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Alternatives cAlternatives_5_2 = (Alternatives)cGroup_5.eContents().get(2);
		private final Keyword cNONEKeyword_5_2_0 = (Keyword)cAlternatives_5_2.eContents().get(0);
		private final Keyword cLOCALKeyword_5_2_1 = (Keyword)cAlternatives_5_2.eContents().get(1);
		private final Keyword cREMOTE_MRKeyword_5_2_2 = (Keyword)cAlternatives_5_2.eContents().get(2);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Keyword cResultmergeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cEqualsSignKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Alternatives cAlternatives_6_2 = (Alternatives)cGroup_6.eContents().get(2);
		private final Keyword cLOCAL_MEMKeyword_6_2_0 = (Keyword)cAlternatives_6_2.eContents().get(0);
		private final Keyword cLOCAL_FILEKeyword_6_2_1 = (Keyword)cAlternatives_6_2.eContents().get(1);
		private final Keyword cLOCAL_AUTOMATICKeyword_6_2_2 = (Keyword)cAlternatives_6_2.eContents().get(2);
		private final Keyword cREMOTE_MRKeyword_6_2_3 = (Keyword)cAlternatives_6_2.eContents().get(3);
		private final Group cGroup_7 = (Group)cAlternatives.eContents().get(7);
		private final Keyword cOptKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cEqualsSignKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Alternatives cAlternatives_7_2 = (Alternatives)cGroup_7.eContents().get(2);
		private final Keyword cNONEKeyword_7_2_0 = (Keyword)cAlternatives_7_2.eContents().get(0);
		private final Keyword cRULEBASEDKeyword_7_2_1 = (Keyword)cAlternatives_7_2.eContents().get(1);
		private final Keyword cHEURISTICKeyword_7_2_2 = (Keyword)cAlternatives_7_2.eContents().get(2);
		private final Keyword cGREEDYKeyword_7_2_3 = (Keyword)cAlternatives_7_2.eContents().get(3);
		private final Keyword cFULL_DPKeyword_7_2_4 = (Keyword)cAlternatives_7_2.eContents().get(4);
		
		//PARAMS:
		//	'check' '=' INT | 'par' '=' INT | 'mode' '=' ('LOCAL' | 'REMOTE_MR') | 'taskpartitioner' '=' ('FIXED' | 'NAIVE' |
		//	'STATIC' | 'FACTORING' | 'FACTORING_CMIN' | 'FACTORING_CMAX') | 'tasksize' '=' INT | 'datapartitioner' '=' ('NONE' |
		//	'LOCAL' | 'REMOTE_MR') | 'resultmerge' '=' ('LOCAL_MEM' | 'LOCAL_FILE' | 'LOCAL_AUTOMATIC' | 'REMOTE_MR') | 'opt' '='
		//	('NONE' | 'RULEBASED' | 'HEURISTIC' | 'GREEDY' | 'FULL_DP');
		@Override public ParserRule getRule() { return rule; }
		
		//'check' '=' INT | 'par' '=' INT | 'mode' '=' ('LOCAL' | 'REMOTE_MR') | 'taskpartitioner' '=' ('FIXED' | 'NAIVE' |
		//'STATIC' | 'FACTORING' | 'FACTORING_CMIN' | 'FACTORING_CMAX') | 'tasksize' '=' INT | 'datapartitioner' '=' ('NONE' |
		//'LOCAL' | 'REMOTE_MR') | 'resultmerge' '=' ('LOCAL_MEM' | 'LOCAL_FILE' | 'LOCAL_AUTOMATIC' | 'REMOTE_MR') | 'opt' '='
		//('NONE' | 'RULEBASED' | 'HEURISTIC' | 'GREEDY' | 'FULL_DP')
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'check' '=' INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'check'
		public Keyword getCheckKeyword_0_0() { return cCheckKeyword_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0_2() { return cINTTerminalRuleCall_0_2; }
		
		//'par' '=' INT
		public Group getGroup_1() { return cGroup_1; }
		
		//'par'
		public Keyword getParKeyword_1_0() { return cParKeyword_1_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1_1() { return cEqualsSignKeyword_1_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_2() { return cINTTerminalRuleCall_1_2; }
		
		//'mode' '=' ('LOCAL' | 'REMOTE_MR')
		public Group getGroup_2() { return cGroup_2; }
		
		//'mode'
		public Keyword getModeKeyword_2_0() { return cModeKeyword_2_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_2_1() { return cEqualsSignKeyword_2_1; }
		
		//('LOCAL' | 'REMOTE_MR')
		public Alternatives getAlternatives_2_2() { return cAlternatives_2_2; }
		
		//'LOCAL'
		public Keyword getLOCALKeyword_2_2_0() { return cLOCALKeyword_2_2_0; }
		
		//'REMOTE_MR'
		public Keyword getREMOTE_MRKeyword_2_2_1() { return cREMOTE_MRKeyword_2_2_1; }
		
		//'taskpartitioner' '=' ('FIXED' | 'NAIVE' | 'STATIC' | 'FACTORING' | 'FACTORING_CMIN' | 'FACTORING_CMAX')
		public Group getGroup_3() { return cGroup_3; }
		
		//'taskpartitioner'
		public Keyword getTaskpartitionerKeyword_3_0() { return cTaskpartitionerKeyword_3_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_1() { return cEqualsSignKeyword_3_1; }
		
		//('FIXED' | 'NAIVE' | 'STATIC' | 'FACTORING' | 'FACTORING_CMIN' | 'FACTORING_CMAX')
		public Alternatives getAlternatives_3_2() { return cAlternatives_3_2; }
		
		//'FIXED'
		public Keyword getFIXEDKeyword_3_2_0() { return cFIXEDKeyword_3_2_0; }
		
		//'NAIVE'
		public Keyword getNAIVEKeyword_3_2_1() { return cNAIVEKeyword_3_2_1; }
		
		//'STATIC'
		public Keyword getSTATICKeyword_3_2_2() { return cSTATICKeyword_3_2_2; }
		
		//'FACTORING'
		public Keyword getFACTORINGKeyword_3_2_3() { return cFACTORINGKeyword_3_2_3; }
		
		//'FACTORING_CMIN'
		public Keyword getFACTORING_CMINKeyword_3_2_4() { return cFACTORING_CMINKeyword_3_2_4; }
		
		//'FACTORING_CMAX'
		public Keyword getFACTORING_CMAXKeyword_3_2_5() { return cFACTORING_CMAXKeyword_3_2_5; }
		
		//'tasksize' '=' INT
		public Group getGroup_4() { return cGroup_4; }
		
		//'tasksize'
		public Keyword getTasksizeKeyword_4_0() { return cTasksizeKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
		
		//'datapartitioner' '=' ('NONE' | 'LOCAL' | 'REMOTE_MR')
		public Group getGroup_5() { return cGroup_5; }
		
		//'datapartitioner'
		public Keyword getDatapartitionerKeyword_5_0() { return cDatapartitionerKeyword_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }
		
		//('NONE' | 'LOCAL' | 'REMOTE_MR')
		public Alternatives getAlternatives_5_2() { return cAlternatives_5_2; }
		
		//'NONE'
		public Keyword getNONEKeyword_5_2_0() { return cNONEKeyword_5_2_0; }
		
		//'LOCAL'
		public Keyword getLOCALKeyword_5_2_1() { return cLOCALKeyword_5_2_1; }
		
		//'REMOTE_MR'
		public Keyword getREMOTE_MRKeyword_5_2_2() { return cREMOTE_MRKeyword_5_2_2; }
		
		//'resultmerge' '=' ('LOCAL_MEM' | 'LOCAL_FILE' | 'LOCAL_AUTOMATIC' | 'REMOTE_MR')
		public Group getGroup_6() { return cGroup_6; }
		
		//'resultmerge'
		public Keyword getResultmergeKeyword_6_0() { return cResultmergeKeyword_6_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_6_1() { return cEqualsSignKeyword_6_1; }
		
		//('LOCAL_MEM' | 'LOCAL_FILE' | 'LOCAL_AUTOMATIC' | 'REMOTE_MR')
		public Alternatives getAlternatives_6_2() { return cAlternatives_6_2; }
		
		//'LOCAL_MEM'
		public Keyword getLOCAL_MEMKeyword_6_2_0() { return cLOCAL_MEMKeyword_6_2_0; }
		
		//'LOCAL_FILE'
		public Keyword getLOCAL_FILEKeyword_6_2_1() { return cLOCAL_FILEKeyword_6_2_1; }
		
		//'LOCAL_AUTOMATIC'
		public Keyword getLOCAL_AUTOMATICKeyword_6_2_2() { return cLOCAL_AUTOMATICKeyword_6_2_2; }
		
		//'REMOTE_MR'
		public Keyword getREMOTE_MRKeyword_6_2_3() { return cREMOTE_MRKeyword_6_2_3; }
		
		//'opt' '=' ('NONE' | 'RULEBASED' | 'HEURISTIC' | 'GREEDY' | 'FULL_DP')
		public Group getGroup_7() { return cGroup_7; }
		
		//'opt'
		public Keyword getOptKeyword_7_0() { return cOptKeyword_7_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_7_1() { return cEqualsSignKeyword_7_1; }
		
		//('NONE' | 'RULEBASED' | 'HEURISTIC' | 'GREEDY' | 'FULL_DP')
		public Alternatives getAlternatives_7_2() { return cAlternatives_7_2; }
		
		//'NONE'
		public Keyword getNONEKeyword_7_2_0() { return cNONEKeyword_7_2_0; }
		
		//'RULEBASED'
		public Keyword getRULEBASEDKeyword_7_2_1() { return cRULEBASEDKeyword_7_2_1; }
		
		//'HEURISTIC'
		public Keyword getHEURISTICKeyword_7_2_2() { return cHEURISTICKeyword_7_2_2; }
		
		//'GREEDY'
		public Keyword getGREEDYKeyword_7_2_3() { return cGREEDYKeyword_7_2_3; }
		
		//'FULL_DP'
		public Keyword getFULL_DPKeyword_7_2_4() { return cFULL_DPKeyword_7_2_4; }
	}
	public class DIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.DI");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cBAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cBISParserRuleCall_0_1_1_0 = (RuleCall)cBAssignment_0_1_1.eContents().get(0);
		private final Keyword cCommaKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Assignment cEAssignment_0_1_3 = (Assignment)cGroup_0_1.eContents().get(3);
		private final RuleCall cEISParserRuleCall_0_1_3_0 = (RuleCall)cEAssignment_0_1_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_4 = (Keyword)cGroup_0_1.eContents().get(4);
		private final Assignment cClidAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cClidCOMMANDLINE_NAMED_IDTerminalRuleCall_1_0 = (RuleCall)cClidAssignment_1.eContents().get(0);
		private final Assignment cClnAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cClnCOMMANDLINE_POSITION_IDTerminalRuleCall_2_0 = (RuleCall)cClnAssignment_2.eContents().get(0);
		
		////IP:	// IP = Iterable Predicate
		//// b=E (':' e=E)?
		////| 'seq' '(' f=E ',' s=E ',' t=E ')'
		////| func=FC
		////;
		//DI:
		//	id=ID ('[' b=IS? ',' e=IS? ']')?
		//	| clid=COMMANDLINE_NAMED_ID
		//	| cln=COMMANDLINE_POSITION_ID;
		@Override public ParserRule getRule() { return rule; }
		
		//// DI = Data Identifier
		//id=ID ('[' b=IS? ',' e=IS? ']')? | clid=COMMANDLINE_NAMED_ID | cln=COMMANDLINE_POSITION_ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// DI = Data Identifier
		//id=ID ('[' b=IS? ',' e=IS? ']')?
		public Group getGroup_0() { return cGroup_0; }
		
		//// DI = Data Identifier
		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ID
		public RuleCall getIdIDParserRuleCall_0_0_0() { return cIdIDParserRuleCall_0_0_0; }
		
		//('[' b=IS? ',' e=IS? ']')?
		public Group getGroup_0_1() { return cGroup_0_1; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }
		
		//b=IS?
		public Assignment getBAssignment_0_1_1() { return cBAssignment_0_1_1; }
		
		//IS
		public RuleCall getBISParserRuleCall_0_1_1_0() { return cBISParserRuleCall_0_1_1_0; }
		
		//','
		public Keyword getCommaKeyword_0_1_2() { return cCommaKeyword_0_1_2; }
		
		//e=IS?
		public Assignment getEAssignment_0_1_3() { return cEAssignment_0_1_3; }
		
		//IS
		public RuleCall getEISParserRuleCall_0_1_3_0() { return cEISParserRuleCall_0_1_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_1_4() { return cRightSquareBracketKeyword_0_1_4; }
		
		//clid=COMMANDLINE_NAMED_ID
		public Assignment getClidAssignment_1() { return cClidAssignment_1; }
		
		//COMMANDLINE_NAMED_ID
		public RuleCall getClidCOMMANDLINE_NAMED_IDTerminalRuleCall_1_0() { return cClidCOMMANDLINE_NAMED_IDTerminalRuleCall_1_0; }
		
		//cln=COMMANDLINE_POSITION_ID
		public Assignment getClnAssignment_2() { return cClnAssignment_2; }
		
		//COMMANDLINE_POSITION_ID
		public RuleCall getClnCOMMANDLINE_POSITION_IDTerminalRuleCall_2_0() { return cClnCOMMANDLINE_POSITION_IDTerminalRuleCall_2_0; }
	}
	public class ISElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.IS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cE1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cE1EParserRuleCall_0_0 = (RuleCall)cE1Assignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cE2Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cE2EParserRuleCall_1_1_0 = (RuleCall)cE2Assignment_1_1.eContents().get(0);
		
		//IS:
		//	e1=E (':' e2=E)?;
		@Override public ParserRule getRule() { return rule; }
		
		//// IS = ID Selector
		//e1=E (':' e2=E)?
		public Group getGroup() { return cGroup; }
		
		//// IS = ID Selector
		//e1=E
		public Assignment getE1Assignment_0() { return cE1Assignment_0; }
		
		//E
		public RuleCall getE1EParserRuleCall_0_0() { return cE1EParserRuleCall_0_0; }
		
		//(':' e2=E)?
		public Group getGroup_1() { return cGroup_1; }
		
		//':'
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }
		
		//e2=E
		public Assignment getE2Assignment_1_1() { return cE2Assignment_1_1; }
		
		//E
		public RuleCall getE2EParserRuleCall_1_1_0() { return cE2EParserRuleCall_1_1_0; }
	}
	public class PLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.PL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTTANParserRuleCall_0_0 = (RuleCall)cTAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTTANParserRuleCall_1_1_0 = (RuleCall)cTAssignment_1_1.eContents().get(0);
		
		//PL:
		//	t+=TAN (',' t+=TAN)*;
		@Override public ParserRule getRule() { return rule; }
		
		//// PL = Parameter List
		//t+=TAN (',' t+=TAN)*
		public Group getGroup() { return cGroup; }
		
		//t+=TAN
		public Assignment getTAssignment_0() { return cTAssignment_0; }
		
		//TAN
		public RuleCall getTTANParserRuleCall_0_0() { return cTTANParserRuleCall_0_0; }
		
		//(',' t+=TAN)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//t+=TAN
		public Assignment getTAssignment_1_1() { return cTAssignment_1_1; }
		
		//TAN
		public RuleCall getTTANParserRuleCall_1_1_0() { return cTTANParserRuleCall_1_1_0; }
	}
	public class EElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.E");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOpAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Alternatives cOpAlternatives_0_0_0 = (Alternatives)cOpAssignment_0_0.eContents().get(0);
		private final Keyword cOpExclamationMarkKeyword_0_0_0_0 = (Keyword)cOpAlternatives_0_0_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_0_0_0_1 = (Keyword)cOpAlternatives_0_0_0.eContents().get(1);
		private final Keyword cOpHyphenMinusKeyword_0_0_0_2 = (Keyword)cOpAlternatives_0_0_0.eContents().get(2);
		private final Assignment cT1Assignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cT1EParserRuleCall_0_1_0 = (RuleCall)cT1Assignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cT1Assignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cT1TEParserRuleCall_1_0_0 = (RuleCall)cT1Assignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOpAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final Alternatives cOpAlternatives_1_1_0_0 = (Alternatives)cOpAssignment_1_1_0.eContents().get(0);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_0_0 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(0);
		private final Keyword cOpPercentSignAsteriskPercentSignKeyword_1_1_0_0_1 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(1);
		private final Keyword cOpPercentSignSolidusPercentSignKeyword_1_1_0_0_2 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(2);
		private final Keyword cOpPercentSignPercentSignKeyword_1_1_0_0_3 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(3);
		private final Keyword cOpAsteriskKeyword_1_1_0_0_4 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(4);
		private final Keyword cOpSolidusKeyword_1_1_0_0_5 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(5);
		private final Keyword cOpPlusSignKeyword_1_1_0_0_6 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(6);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_0_7 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(7);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_0_8 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(8);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0_9 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(9);
		private final Keyword cOpLessThanSignKeyword_1_1_0_0_10 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(10);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_0_11 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(11);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0_12 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(12);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_0_13 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(13);
		private final Keyword cOpAmpersandKeyword_1_1_0_0_14 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(14);
		private final Keyword cOpAmpersandAmpersandKeyword_1_1_0_0_15 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(15);
		private final Keyword cOpVerticalLineKeyword_1_1_0_0_16 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(16);
		private final Keyword cOpVerticalLineVerticalLineKeyword_1_1_0_0_17 = (Keyword)cOpAlternatives_1_1_0_0.eContents().get(17);
		private final Assignment cT2Assignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cT2EParserRuleCall_1_1_1_0 = (RuleCall)cT2Assignment_1_1_1.eContents().get(0);
		
		//E:
		//	op=('!' | '+' | '-') t1=E
		//	| t1=TE (op=('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' | '==' | '!=' | '&' | '&&' |
		//	'|' | '||') t2=E)?;
		@Override public ParserRule getRule() { return rule; }
		
		//// E = Expression
		//op=('!' | '+' | '-') t1=E | t1=TE (op=('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' |
		//'==' | '!=' | '&' | '&&' | '|' | '||') t2=E)?
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// E = Expression
		//op=('!' | '+' | '-') t1=E
		public Group getGroup_0() { return cGroup_0; }
		
		//// E = Expression
		//op=('!' | '+' | '-')
		public Assignment getOpAssignment_0_0() { return cOpAssignment_0_0; }
		
		//('!' | '+' | '-')
		public Alternatives getOpAlternatives_0_0_0() { return cOpAlternatives_0_0_0; }
		
		//'!'
		public Keyword getOpExclamationMarkKeyword_0_0_0_0() { return cOpExclamationMarkKeyword_0_0_0_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_0_0_0_1() { return cOpPlusSignKeyword_0_0_0_1; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_0_0_0_2() { return cOpHyphenMinusKeyword_0_0_0_2; }
		
		//t1=E
		public Assignment getT1Assignment_0_1() { return cT1Assignment_0_1; }
		
		//E
		public RuleCall getT1EParserRuleCall_0_1_0() { return cT1EParserRuleCall_0_1_0; }
		
		//t1=TE (op=('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' | '==' | '!=' | '&' | '&&' | '|'
		//| '||') t2=E)?
		public Group getGroup_1() { return cGroup_1; }
		
		//t1=TE
		public Assignment getT1Assignment_1_0() { return cT1Assignment_1_0; }
		
		//TE
		public RuleCall getT1TEParserRuleCall_1_0_0() { return cT1TEParserRuleCall_1_0_0; }
		
		//(op=('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' | '==' | '!=' | '&' | '&&' | '|' |
		//'||') t2=E)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//op=('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' | '==' | '!=' | '&' | '&&' | '|' |
		//'||')
		public Assignment getOpAssignment_1_1_0() { return cOpAssignment_1_1_0; }
		
		//('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' | '==' | '!=' | '&' | '&&' | '|' | '||')
		public Alternatives getOpAlternatives_1_1_0_0() { return cOpAlternatives_1_1_0_0; }
		
		//'^'
		public Keyword getOpCircumflexAccentKeyword_1_1_0_0_0() { return cOpCircumflexAccentKeyword_1_1_0_0_0; }
		
		//'%*%'
		public Keyword getOpPercentSignAsteriskPercentSignKeyword_1_1_0_0_1() { return cOpPercentSignAsteriskPercentSignKeyword_1_1_0_0_1; }
		
		//'%/%'
		public Keyword getOpPercentSignSolidusPercentSignKeyword_1_1_0_0_2() { return cOpPercentSignSolidusPercentSignKeyword_1_1_0_0_2; }
		
		//'%%'
		public Keyword getOpPercentSignPercentSignKeyword_1_1_0_0_3() { return cOpPercentSignPercentSignKeyword_1_1_0_0_3; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0_4() { return cOpAsteriskKeyword_1_1_0_0_4; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_0_5() { return cOpSolidusKeyword_1_1_0_0_5; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0_6() { return cOpPlusSignKeyword_1_1_0_0_6; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_0_7() { return cOpHyphenMinusKeyword_1_1_0_0_7; }
		
		//'>'
		public Keyword getOpGreaterThanSignKeyword_1_1_0_0_8() { return cOpGreaterThanSignKeyword_1_1_0_0_8; }
		
		//'>='
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0_9() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0_9; }
		
		//'<'
		public Keyword getOpLessThanSignKeyword_1_1_0_0_10() { return cOpLessThanSignKeyword_1_1_0_0_10; }
		
		//'<='
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_0_11() { return cOpLessThanSignEqualsSignKeyword_1_1_0_0_11; }
		
		//'=='
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0_12() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0_12; }
		
		//'!='
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_0_13() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_0_13; }
		
		//'&'
		public Keyword getOpAmpersandKeyword_1_1_0_0_14() { return cOpAmpersandKeyword_1_1_0_0_14; }
		
		//'&&'
		public Keyword getOpAmpersandAmpersandKeyword_1_1_0_0_15() { return cOpAmpersandAmpersandKeyword_1_1_0_0_15; }
		
		//'|'
		public Keyword getOpVerticalLineKeyword_1_1_0_0_16() { return cOpVerticalLineKeyword_1_1_0_0_16; }
		
		//'||'
		public Keyword getOpVerticalLineVerticalLineKeyword_1_1_0_0_17() { return cOpVerticalLineVerticalLineKeyword_1_1_0_0_17; }
		
		//t2=E
		public Assignment getT2Assignment_1_1_1() { return cT2Assignment_1_1_1; }
		
		//E
		public RuleCall getT2EParserRuleCall_1_1_1_0() { return cT2EParserRuleCall_1_1_1_0; }
	}
	public class TEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.TE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cEAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEEParserRuleCall_0_1_0 = (RuleCall)cEAssignment_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cIAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIINTTerminalRuleCall_1_0 = (RuleCall)cIAssignment_1.eContents().get(0);
		private final Assignment cDAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDDOUBLETerminalRuleCall_2_0 = (RuleCall)cDAssignment_2.eContents().get(0);
		private final Assignment cSAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSSTRINGTerminalRuleCall_3_0 = (RuleCall)cSAssignment_3.eContents().get(0);
		private final Assignment cBAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cBTRUEKeyword_4_0 = (Keyword)cBAssignment_4.eContents().get(0);
		private final Assignment cBAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cBFALSEKeyword_5_0 = (Keyword)cBAssignment_5.eContents().get(0);
		private final Assignment cFAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cFFCParserRuleCall_6_0 = (RuleCall)cFAssignment_6.eContents().get(0);
		private final Assignment cDiAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cDiDIParserRuleCall_7_0 = (RuleCall)cDiAssignment_7.eContents().get(0);
		
		//TE: // TE = Tail Expression
		//	'(' e=E ')' | i=INT | d=DOUBLE | s=STRING | b='TRUE' | b='FALSE' | f=FC | di=DI;
		@Override public ParserRule getRule() { return rule; }
		
		//// TE = Tail Expression
		//'(' e=E ')' | i=INT | d=DOUBLE | s=STRING | b='TRUE' | b='FALSE' | f=FC | di=DI
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// TE = Tail Expression
		//'(' e=E ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//// TE = Tail Expression
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//e=E
		public Assignment getEAssignment_0_1() { return cEAssignment_0_1; }
		
		//E
		public RuleCall getEEParserRuleCall_0_1_0() { return cEEParserRuleCall_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//i=INT
		public Assignment getIAssignment_1() { return cIAssignment_1; }
		
		//INT
		public RuleCall getIINTTerminalRuleCall_1_0() { return cIINTTerminalRuleCall_1_0; }
		
		//d=DOUBLE
		public Assignment getDAssignment_2() { return cDAssignment_2; }
		
		//DOUBLE
		public RuleCall getDDOUBLETerminalRuleCall_2_0() { return cDDOUBLETerminalRuleCall_2_0; }
		
		//s=STRING
		public Assignment getSAssignment_3() { return cSAssignment_3; }
		
		//STRING
		public RuleCall getSSTRINGTerminalRuleCall_3_0() { return cSSTRINGTerminalRuleCall_3_0; }
		
		//b='TRUE'
		public Assignment getBAssignment_4() { return cBAssignment_4; }
		
		//'TRUE'
		public Keyword getBTRUEKeyword_4_0() { return cBTRUEKeyword_4_0; }
		
		//b='FALSE'
		public Assignment getBAssignment_5() { return cBAssignment_5; }
		
		//'FALSE'
		public Keyword getBFALSEKeyword_5_0() { return cBFALSEKeyword_5_0; }
		
		//f=FC
		public Assignment getFAssignment_6() { return cFAssignment_6; }
		
		//FC
		public RuleCall getFFCParserRuleCall_6_0() { return cFFCParserRuleCall_6_0; }
		
		//di=DI
		public Assignment getDiAssignment_7() { return cDiAssignment_7; }
		
		//DI
		public RuleCall getDiDIParserRuleCall_7_0() { return cDiDIParserRuleCall_7_0; }
	}
	public class SPKVElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.SPKV");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKIDParserRuleCall_0_0 = (RuleCall)cKAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVSTRINGTerminalRuleCall_2_0 = (RuleCall)cVAssignment_2.eContents().get(0);
		
		//SPKV:
		//	k=ID '=' v=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//// Strict Parameterized Key Value String
		//k=ID '=' v=STRING
		public Group getGroup() { return cGroup; }
		
		//// Strict Parameterized Key Value String
		//k=ID
		public Assignment getKAssignment_0() { return cKAssignment_0; }
		
		//ID
		public RuleCall getKIDParserRuleCall_0_0() { return cKIDParserRuleCall_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//v=STRING
		public Assignment getVAssignment_2() { return cVAssignment_2; }
		
		//STRING
		public RuleCall getVSTRINGTerminalRuleCall_2_0() { return cVSTRINGTerminalRuleCall_2_0; }
	}
	public class PEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.PE");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdIDParserRuleCall_0_0_0 = (RuleCall)cIdAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cEAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEEParserRuleCall_1_0 = (RuleCall)cEAssignment_1.eContents().get(0);
		
		//PE:
		//	(id=ID '=')? e=E;
		@Override public ParserRule getRule() { return rule; }
		
		//(id=ID '=')? e=E
		public Group getGroup() { return cGroup; }
		
		//(id=ID '=')?
		public Group getGroup_0() { return cGroup_0; }
		
		//id=ID
		public Assignment getIdAssignment_0_0() { return cIdAssignment_0_0; }
		
		//ID
		public RuleCall getIdIDParserRuleCall_0_0_0() { return cIdIDParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//e=E
		public Assignment getEAssignment_1() { return cEAssignment_1; }
		
		//E
		public RuleCall getEEParserRuleCall_1_0() { return cEEParserRuleCall_1_0; }
	}
	public class TANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.TAN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTMTParserRuleCall_0_0 = (RuleCall)cTAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TAN:
		//	t=MT name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//// Typed Argument No Assign
		//t=MT name=ID
		public Group getGroup() { return cGroup; }
		
		//// Typed Argument No Assign
		//t=MT
		public Assignment getTAssignment_0() { return cTAssignment_0; }
		
		//MT
		public RuleCall getTMTParserRuleCall_0_0() { return cTMTParserRuleCall_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDParserRuleCall_1_0() { return cNameIDParserRuleCall_1_0; }
	}
	public class ASElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.AS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignHyphenMinusKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AS:
		//	'<-' | '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'<-' | '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'<-'
		public Keyword getLessThanSignHyphenMinusKeyword_0() { return cLessThanSignHyphenMinusKeyword_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
	}
	public class BIFElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.BIF");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsScalarKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAsMatrixKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cAsDoubleKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cAsIntegerKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cAsLogicalKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cAppendKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cCbindKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cMatrixKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cMinKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cMaxKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		private final Keyword cNrowKeyword_10 = (Keyword)cAlternatives.eContents().get(10);
		private final Keyword cNcolKeyword_11 = (Keyword)cAlternatives.eContents().get(11);
		private final Keyword cLengthKeyword_12 = (Keyword)cAlternatives.eContents().get(12);
		private final Keyword cProdKeyword_13 = (Keyword)cAlternatives.eContents().get(13);
		private final Keyword cRandKeyword_14 = (Keyword)cAlternatives.eContents().get(14);
		private final Keyword cRbindKeyword_15 = (Keyword)cAlternatives.eContents().get(15);
		private final Keyword cRemoveEmptyKeyword_16 = (Keyword)cAlternatives.eContents().get(16);
		private final Keyword cReplaceKeyword_17 = (Keyword)cAlternatives.eContents().get(17);
		private final Keyword cSeqsumKeyword_18 = (Keyword)cAlternatives.eContents().get(18);
		private final Keyword cPminKeyword_19 = (Keyword)cAlternatives.eContents().get(19);
		private final Keyword cPmaxKeyword_20 = (Keyword)cAlternatives.eContents().get(20);
		private final Keyword cRowIndexMaxKeyword_21 = (Keyword)cAlternatives.eContents().get(21);
		private final Keyword cRowIndexMinKeyword_22 = (Keyword)cAlternatives.eContents().get(22);
		private final Keyword cPpredKeyword_23 = (Keyword)cAlternatives.eContents().get(23);
		private final Keyword cMeanKeyword_24 = (Keyword)cAlternatives.eContents().get(24);
		private final Keyword cAvgKeyword_25 = (Keyword)cAlternatives.eContents().get(25);
		private final Keyword cMomentKeyword_26 = (Keyword)cAlternatives.eContents().get(26);
		private final Keyword cColSumsKeyword_27 = (Keyword)cAlternatives.eContents().get(27);
		private final Keyword cColMeansKeyword_28 = (Keyword)cAlternatives.eContents().get(28);
		private final Keyword cColMaxsKeyword_29 = (Keyword)cAlternatives.eContents().get(29);
		private final Keyword cColMinsKeyword_30 = (Keyword)cAlternatives.eContents().get(30);
		private final Keyword cCovtableKeyword_31 = (Keyword)cAlternatives.eContents().get(31);
		private final Keyword cCdfKeyword_32 = (Keyword)cAlternatives.eContents().get(32);
		private final Keyword cPnormKeyword_33 = (Keyword)cAlternatives.eContents().get(33);
		private final Keyword cPexpKeyword_34 = (Keyword)cAlternatives.eContents().get(34);
		private final Keyword cPchisqKeyword_35 = (Keyword)cAlternatives.eContents().get(35);
		private final Keyword cPfKeyword_36 = (Keyword)cAlternatives.eContents().get(36);
		private final Keyword cPtKeyword_37 = (Keyword)cAlternatives.eContents().get(37);
		private final Keyword cIcdfKeyword_38 = (Keyword)cAlternatives.eContents().get(38);
		private final Keyword cQnormKeyword_39 = (Keyword)cAlternatives.eContents().get(39);
		private final Keyword cQexpKeyword_40 = (Keyword)cAlternatives.eContents().get(40);
		private final Keyword cQchisqKeyword_41 = (Keyword)cAlternatives.eContents().get(41);
		private final Keyword cQfKeyword_42 = (Keyword)cAlternatives.eContents().get(42);
		private final Keyword cQtKeyword_43 = (Keyword)cAlternatives.eContents().get(43);
		private final Keyword cAggregateKeyword_44 = (Keyword)cAlternatives.eContents().get(44);
		private final Keyword cInterQuartileMeanKeyword_45 = (Keyword)cAlternatives.eContents().get(45);
		private final Keyword cQuantileKeyword_46 = (Keyword)cAlternatives.eContents().get(46);
		private final Keyword cMedianKeyword_47 = (Keyword)cAlternatives.eContents().get(47);
		private final Keyword cRowSumsKeyword_48 = (Keyword)cAlternatives.eContents().get(48);
		private final Keyword cRowMeansKeyword_49 = (Keyword)cAlternatives.eContents().get(49);
		private final Keyword cRowMaxsKeyword_50 = (Keyword)cAlternatives.eContents().get(50);
		private final Keyword cRowMinsKeyword_51 = (Keyword)cAlternatives.eContents().get(51);
		private final Keyword cCumsumKeyword_52 = (Keyword)cAlternatives.eContents().get(52);
		private final Keyword cCumprodKeyword_53 = (Keyword)cAlternatives.eContents().get(53);
		private final Keyword cCumminKeyword_54 = (Keyword)cAlternatives.eContents().get(54);
		private final Keyword cCummaxKeyword_55 = (Keyword)cAlternatives.eContents().get(55);
		private final Keyword cSampleKeyword_56 = (Keyword)cAlternatives.eContents().get(56);
		private final Keyword cOuterKeyword_57 = (Keyword)cAlternatives.eContents().get(57);
		private final Keyword cPrintKeyword_58 = (Keyword)cAlternatives.eContents().get(58);
		private final Keyword cStopKeyword_59 = (Keyword)cAlternatives.eContents().get(59);
		private final Keyword cOrderKeyword_60 = (Keyword)cAlternatives.eContents().get(60);
		private final Keyword cStringKeyword_61 = (Keyword)cAlternatives.eContents().get(61);
		private final Keyword cSeqKeyword_62 = (Keyword)cAlternatives.eContents().get(62);
		
		//// Assign
		//BIF: // BIF = Built in Functions
		//	'as.scalar' | 'as.matrix' | 'as.double' | 'as.integer' | 'as.logical' | 'append' | 'cbind' | 'matrix' | 'min' | 'max' |
		//	'nrow' | 'ncol' | 'length' | 'prod' | 'rand' | 'rbind' | 'removeEmpty' | 'replace' | 'seqsum' | 'pmin' | 'pmax' |
		//	'rowIndexMax' | 'rowIndexMin' | 'ppred' | 'mean' | 'avg' | 'moment' | 'colSums' | 'colMeans' | 'colMaxs' | 'colMins' |
		//	'covtable' | 'cdf' | 'pnorm' | 'pexp' | 'pchisq' | 'pf' | 'pt' | 'icdf' | 'qnorm' | 'qexp' | 'qchisq' | 'qf' | 'qt' |
		//	'aggregate' | 'interQuartileMean' | 'quantile' | 'median' | 'rowSums' | 'rowMeans' | 'rowMaxs' | 'rowMins' | 'cumsum'
		//	| 'cumprod' | 'cummin' | 'cummax' | 'sample' | 'outer' | 'print' | 'stop' | 'order' | 'string' | 'seq';
		@Override public ParserRule getRule() { return rule; }
		
		//// BIF = Built in Functions
		//'as.scalar' | 'as.matrix' | 'as.double' | 'as.integer' | 'as.logical' | 'append' | 'cbind' | 'matrix' | 'min' | 'max' |
		//'nrow' | 'ncol' | 'length' | 'prod' | 'rand' | 'rbind' | 'removeEmpty' | 'replace' | 'seqsum' | 'pmin' | 'pmax' |
		//'rowIndexMax' | 'rowIndexMin' | 'ppred' | 'mean' | 'avg' | 'moment' | 'colSums' | 'colMeans' | 'colMaxs' | 'colMins' |
		//'covtable' | 'cdf' | 'pnorm' | 'pexp' | 'pchisq' | 'pf' | 'pt' | 'icdf' | 'qnorm' | 'qexp' | 'qchisq' | 'qf' | 'qt' |
		//'aggregate' | 'interQuartileMean' | 'quantile' | 'median' | 'rowSums' | 'rowMeans' | 'rowMaxs' | 'rowMins' | 'cumsum' |
		//'cumprod' | 'cummin' | 'cummax' | 'sample' | 'outer' | 'print' | 'stop' | 'order' | 'string' | 'seq'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// BIF = Built in Functions
		//'as.scalar'
		public Keyword getAsScalarKeyword_0() { return cAsScalarKeyword_0; }
		
		//'as.matrix'
		public Keyword getAsMatrixKeyword_1() { return cAsMatrixKeyword_1; }
		
		//'as.double'
		public Keyword getAsDoubleKeyword_2() { return cAsDoubleKeyword_2; }
		
		//'as.integer'
		public Keyword getAsIntegerKeyword_3() { return cAsIntegerKeyword_3; }
		
		//'as.logical'
		public Keyword getAsLogicalKeyword_4() { return cAsLogicalKeyword_4; }
		
		//'append'
		public Keyword getAppendKeyword_5() { return cAppendKeyword_5; }
		
		//'cbind'
		public Keyword getCbindKeyword_6() { return cCbindKeyword_6; }
		
		//'matrix'
		public Keyword getMatrixKeyword_7() { return cMatrixKeyword_7; }
		
		//'min'
		public Keyword getMinKeyword_8() { return cMinKeyword_8; }
		
		//'max'
		public Keyword getMaxKeyword_9() { return cMaxKeyword_9; }
		
		//'nrow'
		public Keyword getNrowKeyword_10() { return cNrowKeyword_10; }
		
		//'ncol'
		public Keyword getNcolKeyword_11() { return cNcolKeyword_11; }
		
		//'length'
		public Keyword getLengthKeyword_12() { return cLengthKeyword_12; }
		
		//'prod'
		public Keyword getProdKeyword_13() { return cProdKeyword_13; }
		
		//'rand'
		public Keyword getRandKeyword_14() { return cRandKeyword_14; }
		
		//'rbind'
		public Keyword getRbindKeyword_15() { return cRbindKeyword_15; }
		
		//'removeEmpty'
		public Keyword getRemoveEmptyKeyword_16() { return cRemoveEmptyKeyword_16; }
		
		//'replace'
		public Keyword getReplaceKeyword_17() { return cReplaceKeyword_17; }
		
		//'seqsum'
		public Keyword getSeqsumKeyword_18() { return cSeqsumKeyword_18; }
		
		//'pmin'
		public Keyword getPminKeyword_19() { return cPminKeyword_19; }
		
		//'pmax'
		public Keyword getPmaxKeyword_20() { return cPmaxKeyword_20; }
		
		//'rowIndexMax'
		public Keyword getRowIndexMaxKeyword_21() { return cRowIndexMaxKeyword_21; }
		
		//'rowIndexMin'
		public Keyword getRowIndexMinKeyword_22() { return cRowIndexMinKeyword_22; }
		
		//'ppred'
		public Keyword getPpredKeyword_23() { return cPpredKeyword_23; }
		
		//'mean'
		public Keyword getMeanKeyword_24() { return cMeanKeyword_24; }
		
		//'avg'
		public Keyword getAvgKeyword_25() { return cAvgKeyword_25; }
		
		//'moment'
		public Keyword getMomentKeyword_26() { return cMomentKeyword_26; }
		
		//'colSums'
		public Keyword getColSumsKeyword_27() { return cColSumsKeyword_27; }
		
		//'colMeans'
		public Keyword getColMeansKeyword_28() { return cColMeansKeyword_28; }
		
		//'colMaxs'
		public Keyword getColMaxsKeyword_29() { return cColMaxsKeyword_29; }
		
		//'colMins'
		public Keyword getColMinsKeyword_30() { return cColMinsKeyword_30; }
		
		//'covtable'
		public Keyword getCovtableKeyword_31() { return cCovtableKeyword_31; }
		
		//'cdf'
		public Keyword getCdfKeyword_32() { return cCdfKeyword_32; }
		
		//'pnorm'
		public Keyword getPnormKeyword_33() { return cPnormKeyword_33; }
		
		//'pexp'
		public Keyword getPexpKeyword_34() { return cPexpKeyword_34; }
		
		//'pchisq'
		public Keyword getPchisqKeyword_35() { return cPchisqKeyword_35; }
		
		//'pf'
		public Keyword getPfKeyword_36() { return cPfKeyword_36; }
		
		//'pt'
		public Keyword getPtKeyword_37() { return cPtKeyword_37; }
		
		//'icdf'
		public Keyword getIcdfKeyword_38() { return cIcdfKeyword_38; }
		
		//'qnorm'
		public Keyword getQnormKeyword_39() { return cQnormKeyword_39; }
		
		//'qexp'
		public Keyword getQexpKeyword_40() { return cQexpKeyword_40; }
		
		//'qchisq'
		public Keyword getQchisqKeyword_41() { return cQchisqKeyword_41; }
		
		//'qf'
		public Keyword getQfKeyword_42() { return cQfKeyword_42; }
		
		//'qt'
		public Keyword getQtKeyword_43() { return cQtKeyword_43; }
		
		//'aggregate'
		public Keyword getAggregateKeyword_44() { return cAggregateKeyword_44; }
		
		//'interQuartileMean'
		public Keyword getInterQuartileMeanKeyword_45() { return cInterQuartileMeanKeyword_45; }
		
		//'quantile'
		public Keyword getQuantileKeyword_46() { return cQuantileKeyword_46; }
		
		//'median'
		public Keyword getMedianKeyword_47() { return cMedianKeyword_47; }
		
		//'rowSums'
		public Keyword getRowSumsKeyword_48() { return cRowSumsKeyword_48; }
		
		//'rowMeans'
		public Keyword getRowMeansKeyword_49() { return cRowMeansKeyword_49; }
		
		//'rowMaxs'
		public Keyword getRowMaxsKeyword_50() { return cRowMaxsKeyword_50; }
		
		//'rowMins'
		public Keyword getRowMinsKeyword_51() { return cRowMinsKeyword_51; }
		
		//'cumsum'
		public Keyword getCumsumKeyword_52() { return cCumsumKeyword_52; }
		
		//'cumprod'
		public Keyword getCumprodKeyword_53() { return cCumprodKeyword_53; }
		
		//'cummin'
		public Keyword getCumminKeyword_54() { return cCumminKeyword_54; }
		
		//'cummax'
		public Keyword getCummaxKeyword_55() { return cCummaxKeyword_55; }
		
		//'sample'
		public Keyword getSampleKeyword_56() { return cSampleKeyword_56; }
		
		//'outer'
		public Keyword getOuterKeyword_57() { return cOuterKeyword_57; }
		
		//'print'
		public Keyword getPrintKeyword_58() { return cPrintKeyword_58; }
		
		//'stop'
		public Keyword getStopKeyword_59() { return cStopKeyword_59; }
		
		//'order'
		public Keyword getOrderKeyword_60() { return cOrderKeyword_60; }
		
		//'string'
		public Keyword getStringKeyword_61() { return cStringKeyword_61; }
		
		//'seq'
		public Keyword getSeqKeyword_62() { return cSeqKeyword_62; }
	}
	public class MTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.MT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cDTParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cVTParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Keyword cRightSquareBracketKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final RuleCall cVTParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MT:
		//	DT '[' VT ']' | VT;
		@Override public ParserRule getRule() { return rule; }
		
		//// ml_type
		//DT '[' VT ']' | VT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// ml_type
		//DT '[' VT ']'
		public Group getGroup_0() { return cGroup_0; }
		
		//DT
		public RuleCall getDTParserRuleCall_0_0() { return cDTParserRuleCall_0_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_0_1() { return cLeftSquareBracketKeyword_0_1; }
		
		//VT
		public RuleCall getVTParserRuleCall_0_2() { return cVTParserRuleCall_0_2; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_0_3() { return cRightSquareBracketKeyword_0_3; }
		
		//VT
		public RuleCall getVTParserRuleCall_1() { return cVTParserRuleCall_1; }
	}
	public class VTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.VT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cStringKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cStringKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cBooleanKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cBooleanKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cDoubleKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cDoubleKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		private final Keyword cIntKeyword_8 = (Keyword)cAlternatives.eContents().get(8);
		private final Keyword cIntegerKeyword_9 = (Keyword)cAlternatives.eContents().get(9);
		
		//VT: // ValueType
		//	'int' | 'integer' | 'string' | 'String' | 'boolean' | 'Boolean' | 'double' | 'Double' | 'Int' | 'Integer';
		@Override public ParserRule getRule() { return rule; }
		
		//// ValueType
		//'int' | 'integer' | 'string' | 'String' | 'boolean' | 'Boolean' | 'double' | 'Double' | 'Int' | 'Integer'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// ValueType
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//'string'
		public Keyword getStringKeyword_2() { return cStringKeyword_2; }
		
		//'String'
		public Keyword getStringKeyword_3() { return cStringKeyword_3; }
		
		//'boolean'
		public Keyword getBooleanKeyword_4() { return cBooleanKeyword_4; }
		
		//'Boolean'
		public Keyword getBooleanKeyword_5() { return cBooleanKeyword_5; }
		
		//'double'
		public Keyword getDoubleKeyword_6() { return cDoubleKeyword_6; }
		
		//'Double'
		public Keyword getDoubleKeyword_7() { return cDoubleKeyword_7; }
		
		//'Int'
		public Keyword getIntKeyword_8() { return cIntKeyword_8; }
		
		//'Integer'
		public Keyword getIntegerKeyword_9() { return cIntegerKeyword_9; }
	}
	public class DTElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.DT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFrameKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMatrixKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cScalarKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cObjectKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cFrameKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMatrixKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		private final Keyword cScalarKeyword_6 = (Keyword)cAlternatives.eContents().get(6);
		private final Keyword cObjectKeyword_7 = (Keyword)cAlternatives.eContents().get(7);
		
		//DT: // DataType (frame, matrix, scalar, object)
		////  (('f'|'F') ('r'|'R') ('a'|'A') ('m'|'M') ('e'|'E'))
		////| (('m'|'M') ('a'|'A') ('t'|'T') ('r'|'R') ('i'|'I') ('x'|'X'))
		////| (('s'|'S') ('c'|'C') ('a'|'A') ('l'|'L') ('a'|'A') ('r'|'R'))
		////| (('o'|'O') ('b'|'B') ('j'|'J') ('e'|'E') ('c'|'C' ('t'|'T')))
		//	'frame' | 'matrix' | 'scalar' | 'object' | 'Frame' | 'Matrix' | 'Scalar' | 'Object';
		@Override public ParserRule getRule() { return rule; }
		
		//// DataType (frame, matrix, scalar, object)
		////  (('f'|'F') ('r'|'R') ('a'|'A') ('m'|'M') ('e'|'E'))
		////| (('m'|'M') ('a'|'A') ('t'|'T') ('r'|'R') ('i'|'I') ('x'|'X'))
		////| (('s'|'S') ('c'|'C') ('a'|'A') ('l'|'L') ('a'|'A') ('r'|'R'))
		////| (('o'|'O') ('b'|'B') ('j'|'J') ('e'|'E') ('c'|'C' ('t'|'T')))
		//'frame' | 'matrix' | 'scalar' | 'object' | 'Frame' | 'Matrix' | 'Scalar' | 'Object'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//// DataType (frame, matrix, scalar, object)
		////  (('f'|'F') ('r'|'R') ('a'|'A') ('m'|'M') ('e'|'E'))
		////| (('m'|'M') ('a'|'A') ('t'|'T') ('r'|'R') ('i'|'I') ('x'|'X'))
		////| (('s'|'S') ('c'|'C') ('a'|'A') ('l'|'L') ('a'|'A') ('r'|'R'))
		////| (('o'|'O') ('b'|'B') ('j'|'J') ('e'|'E') ('c'|'C' ('t'|'T')))
		//'frame'
		public Keyword getFrameKeyword_0() { return cFrameKeyword_0; }
		
		//'matrix'
		public Keyword getMatrixKeyword_1() { return cMatrixKeyword_1; }
		
		//'scalar'
		public Keyword getScalarKeyword_2() { return cScalarKeyword_2; }
		
		//'object'
		public Keyword getObjectKeyword_3() { return cObjectKeyword_3; }
		
		//'Frame'
		public Keyword getFrameKeyword_4() { return cFrameKeyword_4; }
		
		//'Matrix'
		public Keyword getMatrixKeyword_5() { return cMatrixKeyword_5; }
		
		//'Scalar'
		public Keyword getScalarKeyword_6() { return cScalarKeyword_6; }
		
		//'Object'
		public Keyword getObjectKeyword_7() { return cObjectKeyword_7; }
	}
	public class IDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.ID");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cNameIndexReturnKeyword_0_0 = (Keyword)cNameAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cNameLowerTailKeyword_1_0 = (Keyword)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cNameAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cNameSINGLEIDTerminalRuleCall_2_0_0 = (RuleCall)cNameAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cColonColonKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final RuleCall cSINGLEIDTerminalRuleCall_2_1_1 = (RuleCall)cGroup_2_1.eContents().get(1);
		
		//// End Statement
		//ID:
		//	name='index.return'
		//	| name='lower.tail'
		//	| name=SINGLEID ('::' SINGLEID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//name='index.return' | name='lower.tail' | name=SINGLEID ('::' SINGLEID)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//name='index.return'
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//'index.return'
		public Keyword getNameIndexReturnKeyword_0_0() { return cNameIndexReturnKeyword_0_0; }
		
		//name='lower.tail'
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//'lower.tail'
		public Keyword getNameLowerTailKeyword_1_0() { return cNameLowerTailKeyword_1_0; }
		
		//name=SINGLEID ('::' SINGLEID)*
		public Group getGroup_2() { return cGroup_2; }
		
		//name=SINGLEID
		public Assignment getNameAssignment_2_0() { return cNameAssignment_2_0; }
		
		//SINGLEID
		public RuleCall getNameSINGLEIDTerminalRuleCall_2_0_0() { return cNameSINGLEIDTerminalRuleCall_2_0_0; }
		
		//('::' SINGLEID)*
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'::'
		public Keyword getColonColonKeyword_2_1_0() { return cColonColonKeyword_2_1_0; }
		
		//SINGLEID
		public RuleCall getSINGLEIDTerminalRuleCall_2_1_1() { return cSINGLEIDTerminalRuleCall_2_1_1; }
	}
	
	
	private final DElements pD;
	private final FElements pF;
	private final SElements pS;
	private final FCElements pFC;
	private final BSElements pBS;
	private final FPElements pFP;
	private final PARFORPARAMSElements pPARFORPARAMS;
	private final PARAMSElements pPARAMS;
	private final DIElements pDI;
	private final ISElements pIS;
	private final PLElements pPL;
	private final EElements pE;
	private final TEElements pTE;
	private final SPKVElements pSPKV;
	private final PEElements pPE;
	private final TANElements pTAN;
	private final TerminalRule tINT;
	private final TerminalRule tDOUBLE;
	private final ASElements pAS;
	private final BIFElements pBIF;
	private final MTElements pMT;
	private final VTElements pVT;
	private final TerminalRule tSINGLEID;
	private final DTElements pDT;
	private final TerminalRule tEXP;
	private final TerminalRule tALPHA;
	private final TerminalRule tDIGIT;
	private final TerminalRule tDIGITS;
	private final TerminalRule tCOMMANDLINE_NAMED_ID;
	private final TerminalRule tCOMMANDLINE_POSITION_ID;
	private final TerminalRule tSTRING;
	private final TerminalRule tES;
	private final IDElements pID;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tWS;
	
	private final Grammar grammar;

	@Inject
	public DmlGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pD = new DElements();
		this.pF = new FElements();
		this.pS = new SElements();
		this.pFC = new FCElements();
		this.pBS = new BSElements();
		this.pFP = new FPElements();
		this.pPARFORPARAMS = new PARFORPARAMSElements();
		this.pPARAMS = new PARAMSElements();
		this.pDI = new DIElements();
		this.pIS = new ISElements();
		this.pPL = new PLElements();
		this.pE = new EElements();
		this.pTE = new TEElements();
		this.pSPKV = new SPKVElements();
		this.pPE = new PEElements();
		this.pTAN = new TANElements();
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.INT");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.DOUBLE");
		this.pAS = new ASElements();
		this.pBIF = new BIFElements();
		this.pMT = new MTElements();
		this.pVT = new VTElements();
		this.tSINGLEID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.SINGLEID");
		this.pDT = new DTElements();
		this.tEXP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.EXP");
		this.tALPHA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.ALPHA");
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.DIGIT");
		this.tDIGITS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.DIGITS");
		this.tCOMMANDLINE_NAMED_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.COMMANDLINE_NAMED_ID");
		this.tCOMMANDLINE_POSITION_ID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.COMMANDLINE_POSITION_ID");
		this.tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.STRING");
		this.tES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.ES");
		this.pID = new IDElements();
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.SL_COMMENT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.ML_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "sysml.Dml.WS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("sysml.Dml".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//D:
	//	(f+=F | s+=S)*;
	public DElements getDAccess() {
		return pD;
	}
	
	public ParserRule getDRule() {
		return getDAccess().getRule();
	}
	
	//F:
	//	name=ID AS 'function' '(' i=PL ')' ('return' '(' r=PL ')')? '{' s+=S* '}'
	//	| name=ID AS 'externalFunction' '(' i=PL ')' ('return' '(' r=PL ')')? 'implemented' 'in' '(' (spkv+=SPKV (','
	//	spkv+=SPKV)*)? ')';
	public FElements getFAccess() {
		return pF;
	}
	
	public ParserRule getFRule() {
		return getFAccess().getRule();
	}
	
	//S: // S = Statement
	//	'source' '(' src=STRING ')' 'as' srcid=ID ES | 'setcwd' '(' cwd=STRING ')' ES | 'if' '(' ife=E ')' is=BS (=> 'else'
	//	es=BS)? | 'for' '(' fp=FP p=PARFORPARAMS ')' s=BS | 'parfor' '(' pf=FP p=PARFORPARAMS ')' s=BS | 'while' '(' we=E ')'
	//	s=BS | '[' di+=DI (',' di+=DI)* ']' AS fc=FC ES | lhsdi=DI AS ('ifdef' '(' di+=DI ',' e+=E ')' | e+=E) ES | fc=FC ES;
	public SElements getSAccess() {
		return pS;
	}
	
	public ParserRule getSRule() {
		return getSAccess().getRule();
	}
	
	//FC:
	//	(bif=BIF | id=ID) '(' (pe+=PE (',' pe+=PE)*)? ')';
	public FCElements getFCAccess() {
		return pFC;
	}
	
	public ParserRule getFCRule() {
		return getFCAccess().getRule();
	}
	
	//BS:
	//	singleS=S | '{' s+=S* '}';
	public BSElements getBSAccess() {
		return pBS;
	}
	
	public ParserRule getBSRule() {
		return getBSAccess().getRule();
	}
	
	//FP:
	//	id=ID 'in' is=IS;
	public FPElements getFPAccess() {
		return pFP;
	}
	
	public ParserRule getFPRule() {
		return getFPAccess().getRule();
	}
	
	//PARFORPARAMS:
	//	(',' params+=PARAMS)*;
	public PARFORPARAMSElements getPARFORPARAMSAccess() {
		return pPARFORPARAMS;
	}
	
	public ParserRule getPARFORPARAMSRule() {
		return getPARFORPARAMSAccess().getRule();
	}
	
	//PARAMS:
	//	'check' '=' INT | 'par' '=' INT | 'mode' '=' ('LOCAL' | 'REMOTE_MR') | 'taskpartitioner' '=' ('FIXED' | 'NAIVE' |
	//	'STATIC' | 'FACTORING' | 'FACTORING_CMIN' | 'FACTORING_CMAX') | 'tasksize' '=' INT | 'datapartitioner' '=' ('NONE' |
	//	'LOCAL' | 'REMOTE_MR') | 'resultmerge' '=' ('LOCAL_MEM' | 'LOCAL_FILE' | 'LOCAL_AUTOMATIC' | 'REMOTE_MR') | 'opt' '='
	//	('NONE' | 'RULEBASED' | 'HEURISTIC' | 'GREEDY' | 'FULL_DP');
	public PARAMSElements getPARAMSAccess() {
		return pPARAMS;
	}
	
	public ParserRule getPARAMSRule() {
		return getPARAMSAccess().getRule();
	}
	
	////IP:	// IP = Iterable Predicate
	//// b=E (':' e=E)?
	////| 'seq' '(' f=E ',' s=E ',' t=E ')'
	////| func=FC
	////;
	//DI:
	//	id=ID ('[' b=IS? ',' e=IS? ']')?
	//	| clid=COMMANDLINE_NAMED_ID
	//	| cln=COMMANDLINE_POSITION_ID;
	public DIElements getDIAccess() {
		return pDI;
	}
	
	public ParserRule getDIRule() {
		return getDIAccess().getRule();
	}
	
	//IS:
	//	e1=E (':' e2=E)?;
	public ISElements getISAccess() {
		return pIS;
	}
	
	public ParserRule getISRule() {
		return getISAccess().getRule();
	}
	
	//PL:
	//	t+=TAN (',' t+=TAN)*;
	public PLElements getPLAccess() {
		return pPL;
	}
	
	public ParserRule getPLRule() {
		return getPLAccess().getRule();
	}
	
	//E:
	//	op=('!' | '+' | '-') t1=E
	//	| t1=TE (op=('^' | '%*%' | '%/%' | '%%' | '*' | '/' | '+' | '-' | '>' | '>=' | '<' | '<=' | '==' | '!=' | '&' | '&&' |
	//	'|' | '||') t2=E)?;
	public EElements getEAccess() {
		return pE;
	}
	
	public ParserRule getERule() {
		return getEAccess().getRule();
	}
	
	//TE: // TE = Tail Expression
	//	'(' e=E ')' | i=INT | d=DOUBLE | s=STRING | b='TRUE' | b='FALSE' | f=FC | di=DI;
	public TEElements getTEAccess() {
		return pTE;
	}
	
	public ParserRule getTERule() {
		return getTEAccess().getRule();
	}
	
	//SPKV:
	//	k=ID '=' v=STRING;
	public SPKVElements getSPKVAccess() {
		return pSPKV;
	}
	
	public ParserRule getSPKVRule() {
		return getSPKVAccess().getRule();
	}
	
	//PE:
	//	(id=ID '=')? e=E;
	public PEElements getPEAccess() {
		return pPE;
	}
	
	public ParserRule getPERule() {
		return getPEAccess().getRule();
	}
	
	//TAN:
	//	t=MT name=ID;
	public TANElements getTANAccess() {
		return pTAN;
	}
	
	public ParserRule getTANRule() {
		return getTANAccess().getRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	DIGITS ('L' | 'l')?;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	DIGIT+ '.' DIGIT* EXP?
	//	| DIGIT+ EXP?
	//	| '.' DIGIT+ EXP?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//AS:
	//	'<-' | '=';
	public ASElements getASAccess() {
		return pAS;
	}
	
	public ParserRule getASRule() {
		return getASAccess().getRule();
	}
	
	//// Assign
	//BIF: // BIF = Built in Functions
	//	'as.scalar' | 'as.matrix' | 'as.double' | 'as.integer' | 'as.logical' | 'append' | 'cbind' | 'matrix' | 'min' | 'max' |
	//	'nrow' | 'ncol' | 'length' | 'prod' | 'rand' | 'rbind' | 'removeEmpty' | 'replace' | 'seqsum' | 'pmin' | 'pmax' |
	//	'rowIndexMax' | 'rowIndexMin' | 'ppred' | 'mean' | 'avg' | 'moment' | 'colSums' | 'colMeans' | 'colMaxs' | 'colMins' |
	//	'covtable' | 'cdf' | 'pnorm' | 'pexp' | 'pchisq' | 'pf' | 'pt' | 'icdf' | 'qnorm' | 'qexp' | 'qchisq' | 'qf' | 'qt' |
	//	'aggregate' | 'interQuartileMean' | 'quantile' | 'median' | 'rowSums' | 'rowMeans' | 'rowMaxs' | 'rowMins' | 'cumsum'
	//	| 'cumprod' | 'cummin' | 'cummax' | 'sample' | 'outer' | 'print' | 'stop' | 'order' | 'string' | 'seq';
	public BIFElements getBIFAccess() {
		return pBIF;
	}
	
	public ParserRule getBIFRule() {
		return getBIFAccess().getRule();
	}
	
	//MT:
	//	DT '[' VT ']' | VT;
	public MTElements getMTAccess() {
		return pMT;
	}
	
	public ParserRule getMTRule() {
		return getMTAccess().getRule();
	}
	
	//VT: // ValueType
	//	'int' | 'integer' | 'string' | 'String' | 'boolean' | 'Boolean' | 'double' | 'Double' | 'Int' | 'Integer';
	public VTElements getVTAccess() {
		return pVT;
	}
	
	public ParserRule getVTRule() {
		return getVTAccess().getRule();
	}
	
	//terminal SINGLEID:
	//	ALPHA (ALPHA | DIGIT | '_')*;
	public TerminalRule getSINGLEIDRule() {
		return tSINGLEID;
	}
	
	//DT: // DataType (frame, matrix, scalar, object)
	////  (('f'|'F') ('r'|'R') ('a'|'A') ('m'|'M') ('e'|'E'))
	////| (('m'|'M') ('a'|'A') ('t'|'T') ('r'|'R') ('i'|'I') ('x'|'X'))
	////| (('s'|'S') ('c'|'C') ('a'|'A') ('l'|'L') ('a'|'A') ('r'|'R'))
	////| (('o'|'O') ('b'|'B') ('j'|'J') ('e'|'E') ('c'|'C' ('t'|'T')))
	//	'frame' | 'matrix' | 'scalar' | 'object' | 'Frame' | 'Matrix' | 'Scalar' | 'Object';
	public DTElements getDTAccess() {
		return pDT;
	}
	
	public ParserRule getDTRule() {
		return getDTAccess().getRule();
	}
	
	//terminal fragment EXP:
	//	('E' | 'e') ('+' | '-')? DIGITS;
	public TerminalRule getEXPRule() {
		return tEXP;
	}
	
	//terminal fragment ALPHA:
	//	'a'..'z' | 'A'..'Z';
	public TerminalRule getALPHARule() {
		return tALPHA;
	}
	
	//terminal fragment DIGIT:
	//	'0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal fragment DIGITS:
	//	DIGIT+;
	public TerminalRule getDIGITSRule() {
		return tDIGITS;
	}
	
	//terminal COMMANDLINE_NAMED_ID:
	//	'$' (ALPHA (ALPHA | DIGIT | '_')*);
	public TerminalRule getCOMMANDLINE_NAMED_IDRule() {
		return tCOMMANDLINE_NAMED_ID;
	}
	
	//terminal COMMANDLINE_POSITION_ID:
	//	'$' DIGIT+;
	public TerminalRule getCOMMANDLINE_POSITION_IDRule() {
		return tCOMMANDLINE_POSITION_ID;
	}
	
	//terminal STRING:
	//	'"' ('\\' ('a' | 'b' | 't' | 'n' | 'f' | 'r' | 'v' | '"' | "'" | '\\') | !('\\' | '"'))* '"' |
	//	"'" ('\\' ('a' | 'b' | 't' | 'n' | 'f' | 'r' | 'v' | '"' | "'" | '\\') | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return tSTRING;
	}
	
	//terminal ES:
	//	';';
	public TerminalRule getESRule() {
		return tES;
	}
	
	//// End Statement
	//ID:
	//	name='index.return'
	//	| name='lower.tail'
	//	| name=SINGLEID ('::' SINGLEID)*;
	public IDElements getIDAccess() {
		return pID;
	}
	
	public ParserRule getIDRule() {
		return getIDAccess().getRule();
	}
	
	//terminal SL_COMMENT:
	//	'#' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\n' | '\r'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
}
